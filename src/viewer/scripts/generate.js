const fs = require("fs");

const root = __dirname + "/../../../";
const { path } = require(root + "package.json").viewer;
const entries = [];

const readDir = dir => {
  fs.readdirSync(dir, "utf8").forEach(filename => {
    const path = dir + "/" + filename;
    if (fs.lstatSync(path).isDirectory()) {
      readDir(path);
    } else if (filename.endsWith(".js") && filename.split(".").length === 2) {
      if (filename[0] === filename[0].toUpperCase()) {
        const name = filename.replace(".js", "");
        if (!!entries.find(e => e.name === name)) {
          return;
        }
        const mockPath = path.replace(name + ".js", name + ".mock.js");
        entries.push({
          name,
          path,
          mockPath: fs.existsSync(mockPath) ? mockPath : undefined
        });
      }
    }
  });
};

readDir(path);

const imports = entries
  .map(e => {
    const mockImport = e.mockPath
      ? `import ${e.name}Mock from "../../../${e.mockPath}";\r\n`
      : "";
    return `import ${e.name} from "../../../${e.path}";\r\n${mockImport}`;
  })
  .join("");

const items = entries
  .map(e => {
    const mock = e.mockPath ? `, mock: ${e.name}Mock` : "";
    return `  { name: '${e.name}', Component: ${e.name}${mock} }`;
  })
  .join(",\r\n");

const data = `/* This file has been generated by a script */

${imports}
export const items = [
${items}
];
`;

fs.writeFileSync(root + "src/viewer/generated/meta.js", data);

// generate index.js file for All components

const indexData = `/* This file has been generated by a script */

${entries
  .map(
    e =>
      `export { default as ${e.name} } from "./${e.path.replace("src/components/", "")}";`
  )
  .join("\r\n")}
`;

fs.writeFileSync(root + "src/components/index.js", indexData);
